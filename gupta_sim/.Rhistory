out <- read.csv("~/Documents/stage/gupta_sim/out.csv", sep="")
View(out)
plot(out$step, out$cell)
plot(out$step[1:1000], out$cell[1:1000])
out$replay
ifelse(out$replay == 'True', 'red', 'blue')
colors = ifelse(out$replay == 'True', 'red', 'blue')
plot(out$step[1:1000], out$cell[1:1000], c=colors)
plot(out$step[1:1000], out$cell[1:1000], col=colors)
plot(out$step, out$cell, col=colors)
plot(out$step[800:1200], out$cell[800:1200], col=colors[800:1200])
plot(out$step[800:1800], out$cell[800:1800], col=colors[800:1800])
plot(out$step[1100:1500], out$cell[1100:1500], col=colors[1100:1500])
dist_goal_2 = (out$x-450)^2 + (out$y - 900)^2
out <- cbind(out, dist_goal_2)
dist_goal_2 = min((out$x-450)^2 + (out$y - 900)^2, (out$x-1550)^2 + (out$y - 900)^2)
out$dist_goal_2 = dist_goal_2
min?
exitd
?min
dist_goal_2 = pmin((out$x-450)^2 + (out$y - 900)^2, (out$x-1550)^2 + (out$y - 900)^2)
out$dist_goal_2 = dist_goal_2
dist_goal_2 = pmin(sqrt((out$x-450)^2 + (out$y - 900)^2), sqrt((out$x-1550)^2 + (out$y - 900)^2))
out$dist_goal_2 = dist_goal_2
dist_goal_2 = pmin(sqrt((out$x-200)^2 + (out$y - 900)^2), sqrt((out$x-1800)^2 + (out$y - 900)^2))
out$dist_goal_2 = dist_goal_2
a_1 = (200-900)/(1000-200)
b_1 = 900 - a_1 * 200
a_2 = (900-200)/(1800-1000)
b_2 = 900 - a_2 * 1800
sign = ifelse(out$y > a_1 * out$x + b_1 && out$y > a_2 * out$x + b_2, 1, -1)
sign = ifelse(out$y > a_1 * out$x + b_1 & out$y > a_2 * out$x + b_2, 1, -1)
sign = ifelse(out$y > 200 & out$x > 400 & out$x < 1600, 1, -1)
sign = ifelse(out$y >= 200 & out$x > 400 & out$x < 1600, 1, -1)
sign = ifelse(out$y >= 200 & out$x > 400 & out$x < 1600, 1, -1)
sign = ifelse((out$y >= 200 & out$x > 400 & out$x < 1600) | out$y > 800, 1, -1)
out = cbind(out, sign)
source('~/Documents/stage/gupta_sim/analysis.R')
dist_goal = sign * dist_goal
sign = ifelse((out$y >= 200 & out$x > 400 & out$x < 1600) | out$y > 800, -1, 1)
source('~/Documents/stage/gupta_sim/analysis.R')
order(dist_goal)
?order
out = cbind(out, order)
order = order(dist_goal)
source('~/Documents/stage/gupta_sim/analysis.R')
plot(out$step, out$ordered)
plot(out$step, out$ordered, col=colors)
source('~/Documents/stage/gupta_sim/analysis.R')
source('~/Documents/stage/gupta_sim/analysis.R')
plot(out$step, out$dist_goal, col=colors)
source('~/Documents/stage/gupta_sim/analysis.R')
source('~/Documents/stage/gupta_sim/analysis.R')
ncol(out$replay)
nrow(out$replay)
nelem(out$replay)
nop(out$replay)
nobs(out$repalay)
nobs(out$replay)
out$replay
length(out$replay)
to_look = c()
to_look = c()
replay = FALSE
for (i in 1:length(out$replay)) {
if (replay == FALSE && out$replay[i] == "True") {
to_look = c(to_look, i)
replay = TRUE
} else if (replay == TRUE && out$replay == "False") {
replay = FALSE
}
}
to_look = c()
replay = FALSE
for (i in 1:length(out$replay)) {
if (replay == FALSE && out$replay[i] == "True") {
to_look = c(to_look, i)
replay = TRUE
} else if (replay == TRUE && out$replay[i] == "False") {
replay = FALSE
}
}
for (look in to_look) {
plot(out$step[look-100:look+300], out$dist_goal[look-100:look+300], col=colors[look-100:look+300])
}
for (look in to_look) {
print (look)
plot(out$step[look-100:look+300], out$dist_goal[look-100:look+300], col=colors[look-100:look+300])
}
for (look in to_look) {
print (look)
plot(out$step[look-100:look+300], out$dist_goal[look-100:look+300], col=colors[look-100:look+300])
dev.off()
}
for (look in to_look) {
plot.new()
plot(out$step[look-100:look+300], out$dist_goal[look-100:look+300], col=colors[look-100:look+300])
}
order(dist_goal)
order(unique(dist_goal))
unique(dist_goal)
?order
unique(dist_goal)[order(unique(dist_goal))]
source('~/Documents/stage/gupta_sim/analysis.R')
source('~/Documents/stage/gupta_sim/analysis.R')
source('~/Documents/stage/gupta_sim/analysis.R')
source('~/Documents/stage/gupta_sim/analysis.R')
source('~/Documents/stage/gupta_sim/analysis.R')
source('~/Documents/stage/gupta_sim/analysis.R')
source('~/Documents/stage/gupta_sim/analysis.R')
source('~/Documents/stage/gupta_sim/analysis.R')
source('~/Documents/stage/gupta_sim/analysis.R')
source('~/Documents/stage/gupta_sim/analysis.R')
dots(out$step[(look-lmar):(look+rmar)], out$dist_goal[(look-lmar):(look+rmar)], col=colors[(look-lmar):(look+rmar)])
points(out$step[(look-lmar):(look+rmar)], out$dist_goal[(look-lmar):(look+rmar)], col=colors[(look-lmar):(look+rmar)])
source('~/Documents/stage/gupta_sim/analysis.R')
max(out$dist_goal)
min(out$dist_goal)
mean(out$dist_goal)
hist(out$dist_goal)
colMeans(matrix(out$dist_goal, nrow=20))
for (look in to_look) {
means = colMeans(matrix(out$dist_goal[(look-lmar):(look+rmar)], nrow=20))
plot(means)
#plot(out$step[(look-lmar):(look+rmar)], out$dist_goal[(look-lmar):(look+rmar)], type="l", col=colors[(look-lmar):(look+rmar)], main=paste(look-lmar, '-', look+rmar))
#points(out$step[(look-lmar):(look+rmar)], out$dist_goal[(look-lmar):(look+rmar)], col=colors[(look-lmar):(look+rmar)])
}
for (look in to_look) {
means = colMeans(matrix(out$dist_goal[(look-lmar):(look+rmar)], nrow=5))
plot(means)
#plot(out$step[(look-lmar):(look+rmar)], out$dist_goal[(look-lmar):(look+rmar)], type="l", col=colors[(look-lmar):(look+rmar)], main=paste(look-lmar, '-', look+rmar))
#points(out$step[(look-lmar):(look+rmar)], out$dist_goal[(look-lmar):(look+rmar)], col=colors[(look-lmar):(look+rmar)])
}
means = colMeans(matrix(out$dist_goal[(look-lmar):(look+rmar)], nrow=5))
plot(means, colors[(look-lmar):(look+rmar):20])
colMeans(matrix(out$dist_goal, nrow=20))
1:10:2
1:2:10
for (look in to_look) {
means = colMeans(matrix(out$dist_goal[(look-lmar):(look+rmar)], nrow=5))
plot(means, colors[seq((look-lmar),(look+rmar), by=20)])
#plot(out$step[(look-lmar):(look+rmar)], out$dist_goal[(look-lmar):(look+rmar)], type="l", col=colors[(look-lmar):(look+rmar)], main=paste(look-lmar, '-', look+rmar))
#points(out$step[(look-lmar):(look+rmar)], out$dist_goal[(look-lmar):(look+rmar)], col=colors[(look-lmar):(look+rmar)])
}
colors[seq((look-lmar),(look+rmar), by=20)]
means
for (look in to_look) {
means = colMeans(matrix(out$dist_goal[(look-lmar):(look+rmar)], nrow=5))
plot(means, colors[seq((look-lmar),(look+rmar), by=5)])
#plot(out$step[(look-lmar):(look+rmar)], out$dist_goal[(look-lmar):(look+rmar)], type="l", col=colors[(look-lmar):(look+rmar)], main=paste(look-lmar, '-', look+rmar))
#points(out$step[(look-lmar):(look+rmar)], out$dist_goal[(look-lmar):(look+rmar)], col=colors[(look-lmar):(look+rmar)])
}
means = colMeans(matrix(out$dist_goal[(look-lmar):(look+rmar)], nrow=5))
plot(means, colors[seq((look-lmar),(look+rmar), by=5)])
seq((look-lmar),(look+rmar), by=5)
for (look in to_look) {
means = colMeans(matrix(out$dist_goal[(look-lmar):(look+rmar)], nrow=5))
plot(means, col=colors[seq((look-lmar),(look+rmar), by=5)])
#plot(out$step[(look-lmar):(look+rmar)], out$dist_goal[(look-lmar):(look+rmar)], type="l", col=colors[(look-lmar):(look+rmar)], main=paste(look-lmar, '-', look+rmar))
#points(out$step[(look-lmar):(look+rmar)], out$dist_goal[(look-lmar):(look+rmar)], col=colors[(look-lmar):(look+rmar)])
}
for (look in to_look) {
means = colMeans(matrix(out$dist_goal[(look-lmar):(look+rmar)], nrow=5))
plot(means, col=colors[seq((look-lmar),(look+rmar), by=5)])
lines(means)
#plot(out$step[(look-lmar):(look+rmar)], out$dist_goal[(look-lmar):(look+rmar)], type="l", col=colors[(look-lmar):(look+rmar)], main=paste(look-lmar, '-', look+rmar))
#points(out$step[(look-lmar):(look+rmar)], out$dist_goal[(look-lmar):(look+rmar)], col=colors[(look-lmar):(look+rmar)])
}
for (look in to_look) {
means = colMeans(matrix(out$dist_goal[(look-lmar):(look+rmar)], nrow=4))
plot(means, col=colors[seq((look-lmar),(look+rmar), by=4)])
lines(means)
#plot(out$step[(look-lmar):(look+rmar)], out$dist_goal[(look-lmar):(look+rmar)], type="l", col=colors[(look-lmar):(look+rmar)], main=paste(look-lmar, '-', look+rmar))
#points(out$step[(look-lmar):(look+rmar)], out$dist_goal[(look-lmar):(look+rmar)], col=colors[(look-lmar):(look+rmar)])
}
for (look in to_look) {
means = colMeans(matrix(out$dist_goal[(look-lmar):(look+rmar)], nrow=4))
plot(means, col=colors[seq((look-lmar),(look+rmar), by=4)], ylim=c(-1000, 1000))
lines(means)
#plot(out$step[(look-lmar):(look+rmar)], out$dist_goal[(look-lmar):(look+rmar)], type="l", col=colors[(look-lmar):(look+rmar)], main=paste(look-lmar, '-', look+rmar))
#points(out$step[(look-lmar):(look+rmar)], out$dist_goal[(look-lmar):(look+rmar)], col=colors[(look-lmar):(look+rmar)])
}
for (look in to_look) {
means = colMeans(matrix(out$dist_goal[(look-lmar):(look+rmar)], nrow=4))
plot(means, col=colors[seq((look-lmar),(look+rmar), by=4)], ylim=c(-1000, 1000), main="mean")
lines(means)
plot(out$step[(look-lmar):(look+rmar)], out$dist_goal[(look-lmar):(look+rmar)], type="l", col=colors[(look-lmar):(look+rmar)], main=paste(look-lmar, '-', look+rmar))
points(out$step[(look-lmar):(look+rmar)], out$dist_goal[(look-lmar):(look+rmar)], col=colors[(look-lmar):(look+rmar)])
}
source('~/Documents/stage/gupta_sim/analysis.R')
for (look in to_look) {
means = colMeans(matrix(out$dist_goal[(look-lmar):(look+rmar)], nrow=3))
plot(means, col=colors[seq((look-lmar),(look+rmar), by=4)], ylim=c(-1000, 1000), main="mean")
lines(means)
plot(out$step[(look-lmar):(look+rmar)], out$dist_goal[(look-lmar):(look+rmar)], type="l", col=colors[(look-lmar):(look+rmar)], main=paste(look-lmar, '-', look+rmar))
points(out$step[(look-lmar):(look+rmar)], out$dist_goal[(look-lmar):(look+rmar)], col=colors[(look-lmar):(look+rmar)])
}
em = embed(out$dist_goal[(look-lmar):(look+rmar)],10) #10 représente la taille de ta fenêtre
means = apply(em,1,mean)
plot(means, col=colors[seq((look-lmar),(look+rmar))], ylim=c(-1000, 1000), main="mean")
lines(means)
plot(out$step[(look-lmar):(look+rmar)], out$dist_goal[(look-lmar):(look+rmar)], type="l", col=colors[(look-lmar):(look+rmar)], main=paste(look-lmar, '-', look+rmar))
points(out$step[(look-lmar):(look+rmar)], out$dist_goal[(look-lmar):(look+rmar)], col=colors[(look-lmar):(look+rmar)])
}
for (look in to_look) {
em = embed(out$dist_goal[(look-lmar):(look+rmar)],10) #10 représente la taille de ta fenêtre
means = apply(em,1,mean)
plot(means, col=colors[seq((look-lmar),(look+rmar))], ylim=c(-1000, 1000), main="mean")
lines(means)
plot(out$step[(look-lmar):(look+rmar)], out$dist_goal[(look-lmar):(look+rmar)], type="l", col=colors[(look-lmar):(look+rmar)], main=paste(look-lmar, '-', look+rmar))
points(out$step[(look-lmar):(look+rmar)], out$dist_goal[(look-lmar):(look+rmar)], col=colors[(look-lmar):(look+rmar)])
}
for (look in to_look) {
em = embed(out$dist_goal[(look-lmar):(look+rmar)],3) #10 représente la taille de ta fenêtre
means = apply(em,1,mean)
plot(means, col=colors[seq((look-lmar),(look+rmar))], ylim=c(-1000, 1000), main="mean")
lines(means)
plot(out$step[(look-lmar):(look+rmar)], out$dist_goal[(look-lmar):(look+rmar)], type="l", col=colors[(look-lmar):(look+rmar)], main=paste(look-lmar, '-', look+rmar))
points(out$step[(look-lmar):(look+rmar)], out$dist_goal[(look-lmar):(look+rmar)], col=colors[(look-lmar):(look+rmar)])
}
for (look in to_look) {
em = embed(out$dist_goal[(look-lmar):(look+rmar)],2) #10 représente la taille de ta fenêtre
means = apply(em,1,mean)
plot(means, col=colors[seq((look-lmar),(look+rmar))], ylim=c(-1000, 1000), main="mean")
lines(means)
plot(out$step[(look-lmar):(look+rmar)], out$dist_goal[(look-lmar):(look+rmar)], type="l", col=colors[(look-lmar):(look+rmar)], main=paste(look-lmar, '-', look+rmar))
points(out$step[(look-lmar):(look+rmar)], out$dist_goal[(look-lmar):(look+rmar)], col=colors[(look-lmar):(look+rmar)])
}
for (look in to_look) {
em = embed(out$dist_goal[(look-lmar):(look+rmar)],5) #10 représente la taille de ta fenêtre
means = apply(em,1,mean)
plot(means, col=colors[seq((look-lmar),(look+rmar))], ylim=c(-1000, 1000), main="mean")
lines(means)
plot(out$step[(look-lmar):(look+rmar)], out$dist_goal[(look-lmar):(look+rmar)], type="l", col=colors[(look-lmar):(look+rmar)], main=paste(look-lmar, '-', look+rmar))
points(out$step[(look-lmar):(look+rmar)], out$dist_goal[(look-lmar):(look+rmar)], col=colors[(look-lmar):(look+rmar)])
}
for (look in to_look) {
em = embed(out$dist_goal[(look-lmar):(look+rmar)],5) #10 représente la taille de ta fenêtre
means = apply(em,1,mean)
plot(out$step[(look-lmar):(look+rmar)], means, col=colors[seq((look-lmar),(look+rmar))], ylim=c(-1000, 1000), main="mean")
lines(out$step[(look-lmar):(look+rmar)], means)
plot(out$step[(look-lmar):(look+rmar)], out$dist_goal[(look-lmar):(look+rmar)], type="l", col=colors[(look-lmar):(look+rmar)], main=paste(look-lmar, '-', look+rmar))
points(out$step[(look-lmar):(look+rmar)], out$dist_goal[(look-lmar):(look+rmar)], col=colors[(look-lmar):(look+rmar)])
}
plot(means, col=colors[seq((look-lmar),(look+rmar))], ylim=c(-1000, 1000), main="mean")
em = embed(out$dist_goal,5) #10 représente la taille de ta fenêtre
means = apply(em,1,mean)
plot(means, col=colors, ylim=c(-1000, 1000), main="mean")
rmar = 250
for (look in to_look) {
em = embed(out$dist_goal[(look-lmar):(look+rmar)],5) #10 représente la taille de ta fenêtre
means = apply(em,1,mean)
plot(means, col=colors[seq((look-lmar),(look+rmar))], ylim=c(-1000, 1000), main="mean")
lines(out$step[(look-lmar):(look+rmar)], means)
plot(out$step[(look-lmar):(look+rmar)], out$dist_goal[(look-lmar):(look+rmar)], type="l", col=colors[(look-lmar):(look+rmar)], main=paste(look-lmar, '-', look+rmar))
points(out$step[(look-lmar):(look+rmar)], out$dist_goal[(look-lmar):(look+rmar)], col=colors[(look-lmar):(look+rmar)])
}
em = embed(out$dist_goal[(look-lmar):(look+rmar)],5) #10 représente la taille de ta fenêtre
means = apply(em,1,mean)
plot(means, col=colors[seq((look-lmar),(look+rmar))], ylim=c(-1000, 1000), main="mean")
lines(out$step[(look-lmar):(look+rmar)], means)
em = embed(out$dist_goal[(look-lmar):(look+rmar)],5) #10 représente la taille de ta fenêtre
means = apply(em,1,mean)
plot(out$step[(look-lmar):(look+rmar)], means, col=colors[seq((look-lmar),(look+rmar))], ylim=c(-1000, 1000), main="mean")
lines(out$step[(look-lmar):(look+rmar)], means)
plot(out$step[(look-lmar):(look+rmar)], out$dist_goal[(look-lmar):(look+rmar)], type="l", col=colors[(look-lmar):(look+rmar)], main=paste(look-lmar, '-', look+rmar))
em = embed(out$dist_goal[(look-lmar):(look+rmar)],5) #10 représente la taille de ta fenêtre
means = apply(em,1,mean)
plot(means, col=colors[seq((look-lmar),(look+rmar))], ylim=c(-1000, 1000), main="mean")
lines(means)
plot(out$step[(look-lmar):(look+rmar)], out$dist_goal[(look-lmar):(look+rmar)], type="l", col=colors[(look-lmar):(look+rmar)], main=paste(look-lmar, '-', look+rmar))
points(out$step[(look-lmar):(look+rmar)], out$dist_goal[(look-lmar):(look+rmar)], col=colors[(look-lmar):(look+rmar)])
for (look in to_look) {
em = embed(out$dist_goal[(look-lmar):(look+rmar)],1) #10 représente la taille de ta fenêtre
means = apply(em,1,mean)
plot(means, col=colors[seq((look-lmar),(look+rmar))], ylim=c(-1000, 1000), main="mean")
lines(means)
plot(out$step[(look-lmar):(look+rmar)], out$dist_goal[(look-lmar):(look+rmar)], type="l", col=colors[(look-lmar):(look+rmar)], main=paste(look-lmar, '-', look+rmar))
points(out$step[(look-lmar):(look+rmar)], out$dist_goal[(look-lmar):(look+rmar)], col=colors[(look-lmar):(look+rmar)])
}
source('~/Documents/stage/gupta_sim/analysis.R')
source('~/Documents/stage/gupta_sim/analysis.R')
source('~/Documents/stage/gupta_sim/analysis.R')
source('~/Documents/stage/gupta_sim/analysis.R')
?errbar
?errorbar
library('Hmisc')
install.packages("Hmisc")
source('~/Documents/stage/gupta_sim/analysis.R')
?std
??std
var
?var
source('~/Documents/stage/gupta_sim/analysis.R')
errbar(y=means, yplus=means + stds, yminus=means-stds)
errbar(x=1:length(means), y=means, yplus=means + stds, yminus=means-stds)
source('~/Documents/stage/gupta_sim/analysis.R')
source('~/Documents/stage/gupta_sim/analysis.R')
source('~/Documents/stage/gupta_sim/analysis.R')
source('~/Documents/stage/gupta_sim/analysis.R')
View(out)
source('~/Documents/stage/gupta_sim/analysis.R')
?errbar
source('~/Documents/stage/gupta_sim/analysis.R')
source('~/Documents/stage/gupta_sim/analysis.R')
source('~/Documents/stage/gupta_sim/analysis.R')
